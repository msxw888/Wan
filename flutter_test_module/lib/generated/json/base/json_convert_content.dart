// ignore_for_file: non_constant_identifier_names
// ignore_for_file: camel_case_types
// ignore_for_file: prefer_single_quotes

// This file is automatically generated. DO NOT EDIT, all your changes would be lost.
import 'package:flutter_test_module/bean/artical_entity.dart';
import 'package:flutter_test_module/generated/json/artical_entity_helper.dart';

class JsonConvert<T> {
  T fromJson(Map<String, dynamic> json) {
    return _getFromJson<T>(runtimeType, this, json);
  }

  Map<String, dynamic> toJson() {
    return _getToJson<T>(runtimeType, this);
  }

  static _getFromJson<T>(Type type, data, json) {
    switch (type) {
      case ArticalEntity:
        return articalEntityFromJson(data as ArticalEntity, json) as T;
      case ArticalData:
        return articalDataFromJson(data as ArticalData, json) as T;
      case ArticalDataDatas:
        return articalDataDatasFromJson(data as ArticalDataDatas, json) as T;
    }
    return data as T;
  }

  static _getToJson<T>(Type type, data) {
    switch (type) {
      case ArticalEntity:
        return articalEntityToJson(data as ArticalEntity);
      case ArticalData:
        return articalDataToJson(data as ArticalData);
      case ArticalDataDatas:
        return articalDataDatasToJson(data as ArticalDataDatas);
    }
    return data as T;
  }

  //Go back to a single instance by type
  static _fromJsonSingle<M>(json) {
    String type = M.toString();
    if (type == (ArticalEntity).toString()) {
      return ArticalEntity().fromJson(json);
    }
    if (type == (ArticalData).toString()) {
      return ArticalData().fromJson(json);
    }
    if (type == (ArticalDataDatas).toString()) {
      return ArticalDataDatas().fromJson(json);
    }

    return null;
  }

  //list is returned by type
  static M _getListChildType<M>(List data) {
    if (<ArticalEntity>[] is M) {
      return data
          .map<ArticalEntity>((e) => ArticalEntity().fromJson(e))
          .toList() as M;
    }
    if (<ArticalData>[] is M) {
      return data.map<ArticalData>((e) => ArticalData().fromJson(e)).toList()
          as M;
    }
    if (<ArticalDataDatas>[] is M) {
      return data
          .map<ArticalDataDatas>((e) => ArticalDataDatas().fromJson(e))
          .toList() as M;
    }

    throw Exception("not found");
  }

  static M fromJsonAsT<M>(json) {
    if (json is List) {
      return _getListChildType<M>(json);
    } else {
      return _fromJsonSingle<M>(json) as M;
    }
  }
}
